import { viem } from "hardhat";
import { createPublicClient, http, createWalletClient, parseEther, formatEther, toHex, hexToString } from "viem";
import { privateKeyToAccount } from "viem/accounts";
import { sepolia } from "viem/chains";
import { abi, bytecode } from "../artifacts/contracts/Ballot.sol/Ballot.json";

import * as dotenv from "dotenv";
dotenv.config();

const providerApiKey = process.env.ALCHEMY_API_KEY || "";
const deployerPrivateKey = process.env.PRIVATE_KEY || "";
const CONTRACT = "0xabff3d47e6a5967049aff94cd45b836042b3fe24"

const mintTx = await contract.write.mint([acc1.account.address, MINT_VALUE]);

const tokenContract = await Contract.fromAbi(CONTRACT, ERC20_ABI, signer);

const tx = await tokenContract.mint(mintAmount);


async function main() {
  const publicClient = createPublicClient({
    chain: sepolia,
    transport: http(`https://eth-sepolia.g.alchemy.com/v2/${providerApiKey}`),
  });


  const proposal = (await publicClient.readContract({
    address: CONTRACT,
    abi,
    functionName: "proposals",



  const blockNumber = await publicClient.getBlockNumber();
  const account = privateKeyToAccount(`0x${deployerPrivateKey}`);
  const deployer = createWalletClient({
    account,
    chain: sepolia,
    transport: http(`https://eth-sepolia.g.alchemy.com/v2/${providerApiKey}`),
  });
  console.log(`Token contract deployed at ${contract}\n`);
  const mintTx = await contract.write.mint([
    deployer.account.address,
    MINT_VALUE]);
  await publicClient.waitForTransactionReceipt({ hash: mintTx });
  console.log(
    `Minted ${formatEther(MINT_VALUE)} units of MyToken to account ${
      deployer.account.address
    }\n`
  );
};
